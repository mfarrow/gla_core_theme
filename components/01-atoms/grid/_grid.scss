$container-max-widths: (
  sm: 540px,
  md: 720px,
  lg: 960px,
  xl: 1140px,
  xxl: 1440px,
);

$screens: (
  sm: $t-screens-sm,
  md: $t-screens-md,
  lg: $t-screens-lg,
  xl: $t-screens-xl,
  xxl: $t-screens-xxl,
);

// The container approach is based on https://www.joshwcomeau.com/css/full-bleed but using fixed widths
// for each breakpoint, rather than being based on character width. This matches the designs.
// See https://codepen.io/hexagoncircle/pen/gOWjwme for an example of aligning content within the container
// by inheriting the grid columns, but still allowing it to be scrolled horizontally out of the grid.
// I'm not sure the current designs include any examples of this, but I'm including it for future reference.
.container {
  $mobile-gutter: 15px;

  display: grid;
  // Use unquote to avoid Sass thinking we want to use its min function.
  grid-template-columns: unquote("1fr calc(100% - #{$mobile-gutter * 2}) 1fr");

  // Have content inside the container take up the middle (main) grid column.
  // The other two grid columns act as gutters and center the page content
  // without needing to use margin auto.
  > * {
    grid-column: 2;
  }

  // We use 100vw rather than 100% intentionally. This is so that the custom property can be used
  // inside a .rich-text .scrollable-table table caption selector to restrict the caption element
  // to the width of the container, without the very-wide potential width of a scrollable table
  // blowing out 100% and making it larger than the viewport.
  // stylelint-disable-next-line -- variable must come before custom property declaration, for Sass.
  &,
  ::before,
  ::after {
    --container-width: calc(var(--reliable-100vw) - #{$mobile-gutter * 2});
  }

  // Set a fixed width for the middle column at each breakpoint, and set a custom property for elements like table
  // captions that we might need to restrict to the container width.
  @each $breakpoint, $container-max-width in $container-max-widths {
    @include breakpoint(map-get($screens, $breakpoint)) {
      grid-template-columns: unquote("1fr #{$container-max-width} 1fr");

      &,
      ::before,
      ::after {
        --container-width: #{$container-max-width};
      }
    }
  }
}

.u-w-container {
  @each $breakpoint, $container-max-width in $container-max-widths {
    @include breakpoint(map-get($screens, $breakpoint)) {
      width: $container-max-width;
    }
  }
}
