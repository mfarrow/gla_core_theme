$table-inner-spacing: $t-spacing-3-5 $t-spacing-4;

.rich-text table,
.styled-table {
  width: 100%;
  table-layout: auto;
  caption-side: top;
  border-spacing: 0;
  text-align: left;
  // We can't use border-collapse: collapse, otherwise we can't round our td elements.
  border-collapse: separate;
  background-color: $t-colors-white;
  font-size: $t-font-size-sm;
  line-height: $t-font-size-sm-line-height;

  tbody td {
    padding: $table-inner-spacing;
    vertical-align: top;

    &:nth-of-type(even) {
      // We have to use a RGBA value here so the shadows from _scrollable-table.scss can
      // show through the cell.
      background-color: rgba($t-colors-black, 0.04);
    }
  }

  caption {
    // Set a max-width for the caption when to help keep it readable. We want the max width
    // to either be the container width, or the max width of the rich text component
    // (measured in characters), whatever is smallest. We use unquote to avoid Sass thinking
    // we want to use its own min function.
    max-width: unquote(
      "min(var(--container-width), #{$t-max-width-rich-text})"
    );
    margin-bottom: $t-spacing-6;
    text-align: left;
    // The caption is styled more like paragraph text.
    font-size: $t-font-size-base;
    line-height: $t-font-size-base-line-height;

    @include breakpoint($t-screens-xl) {
      // Bump up the text size to match the increased text size of the rich text component
      // at this breakpoint. This keeps the text size and any max-width defined in ch units
      // constant between captions and paragraphs.
      font-size: $t-font-size-lg;
      line-height: $t-font-size-lg-line-height;
    }
  }

  thead {
    color: $t-colors-vulcan;
    font-weight: $t-font-weight-bold;
  }

  th {
    padding: $table-inner-spacing;
    vertical-align: top;
    color: $t-colors-white;
    // Magic number/colour taken from designs.
    border-color: rgba(255, 255, 255, 0.1);
    border-right-width: $t-border-width-default;
    border-bottom-width: $t-border-width-default;
    background-color: $t-colors-grey;
  }

  tbody tr td,
  tbody tr th {
    border-bottom-width: $t-border-width-default;
  }

  tbody tr td {
    // Magic number/colour taken from designs.
    border-color: rgba(53, 61, 66, 0.1);

    &:last-of-type {
      border-right-width: $t-border-width-default;
    }
  }

  // Add rounded cornersâ€¦
  & > thead tr {
    & *:first-child {
      border-top-left-radius: $t-border-radius-6;
    }

    & *:last-child {
      border-top-right-radius: $t-border-radius-6;
    }
  }

  & > tbody tr:first-child {
    & *:first-child {
      border-top-left-radius: $t-border-radius-6;
    }

    & *:last-child {
      border-top-right-radius: $t-border-radius-6;
    }

    td {
      border-top-width: $t-border-width-default;
    }
  }

  & > tbody tr:last-child {
    & *:first-child {
      border-bottom-left-radius: $t-border-radius-6;
    }

    & *:last-child {
      border-bottom-right-radius: $t-border-radius-6;
    }
  }

  // Undo the rounded corner in the tbody if we have a thead _then_ a tbody
  & > thead ~ tbody tr:first-child {
    & *:first-child {
      border-radius: unset;
    }

    & *:last-child {
      border-radius: unset;
    }
  }

  & > thead ~ tbody tr td:first-child {
    border-left-width: $t-border-width-default;
  }

  @include breakpoint($t-screens-xl) {
    font-size: $t-font-size-base;
    line-height: $t-line-height-20;
  }
}
